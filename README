Вход:

Создать ansible playbook для полноценного разворачивания базового python-приложения, которое использует PostgreSQL в качестве БД и uWSGI для коннекта к nginx. 
В него должен входить функционал по установке и конфигурации следующих сервисов:
 - postgresql
 - nginx
 - uwsgi
 - supervisord

Т.к. на сервере может быть несколько веб-приложений и они могут использовать разные python-библиотеки, несовместимые друг с другом, нужно использовать virtualenv-окружение для проекта.
Так же, playbook должен уметь разворачивать python-проект из удаленного репозитория (публичный репозиторий на GitHub, например), поддерживать обновление virtualenv-окружения, кода и миграции БД.
Секретные данные, такие как ключи и пароли, не должны храниться в самом репозитории проекта, при необходимости они должны вноситься самим ansible-плейбуком по мере необходимости.

Писать собственное приложение необходимости нет, можно использовать базовый каркас http://mezzanine.jupo.org/, при создании проекта есть опция включения демо-страниц.
В качестве целевой машины можно использовать Vagrant с боксом ubuntu/xenial64, пробросив из него наружу порт для доступа веб-интерфейсу приложения.

Конечный playbook должен быть универсальным, чтобы в него было достаточно легко добавить разворачивание еще нескольких подобных проектов.

Чтобы задание считалось выполненным, оно должно быть легко воспроизводимо на произвольном хосте (ограничим ОС дистрибутивом ubuntu), после разворачивания можно было зайти на веб-интерфейс хоста и увидеть работающее python-приложение, зайти в его админку.

Нужно составить сопроводительный документ-readme, в котором будут описаны обоснования принятых решений.

Результаты:
Создано два playbookа, main.yml служит непосредственно для разворачивания приложения, во втором variables.yml хранятся переменные необходимые для разворачивания проекта. 
В функционал входит разворачивание следующих сервисов:
 - postgresql
 - nginx
 - uwsgi
 
Проект скачивается с GitHub и разворачивается в виртуальном окружении, секретные данные вводятся из playbookа
В проекте Mezzanine возникли сложности со статикой, по-этому используется базовый проект на django в боксе Vagrant

Описание решения:
Плейбук состоит из 4х плеев в рамках которых последовательно выполняются следующие задачи:
Install {{project_name}} enviroment
	Инсталяция необходимых пакетов 
Update configs
	Создание окружения для функционирования UWSGI в режиме Emperor. Загрузка скрипта для systemd, создание директорий и конф файла.
Deploy DB
	Создание бд PostgreSQL
Deploy project {{project_name}}
	Выполнение действий специфичных для проекта. Создание виртуального окружения и установка необходимых пакетов, скачивание из репозитория GitHub самого проекта, 
	формирование из шаблонов и загрузка конфигурационных файлов для NGINX, UWSGI. Формирование файла settings.py с заданием параметров бд и allowed_hosts.

Для проверки использовался базовый проект django и 8000 порт соответвенно адрес проверки будет http://ipaddr:8000/admin/login/?next=/admin/